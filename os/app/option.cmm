#include "spi.hmm"
#include "option.hmm"
#include "lcd.hmm"
#include "mm.hmm"
#include <fs.hmm>
#include <util.hmm>
#include "appUtil.hmm"

int contrastLevel;
int volumeLevel;
int sleepTimeIdx;

char[] fname = "setting.txt";           // ファイル名は固定
char[] path = array(21);                // /settings/setting.txt
char[] settingsDir = "/settings";
char[][] settingsData = array(3,3);         // 設定データを保持する配列
char[] ch_buf = array(2);               // 読み取りデータの一時的な変数
char[] tmp = array(3);
char[] dg = array(2);
int[] time = {10,30,60,180,300,-1};    // -1 は NONE

char[] fnameToPath(char[] fname) {
  strCpy(path, settingsDir);
  strCat(path, "/");
  strCat(path, fname);
  return path;
}

void setContrast(int level) { //コントラスト反映
  if (level < 1) level = 1;
  if (level > 10) level = 10;
  contrastLevel = level;

  int contrast = 16 + (level-5) * 3; //16がデフォルト値
  if(contrast < 0) contrast = 0;
  if(contrast > 63) contrast = 63;

  char[] cmd = malloc(3);
  cmd[0] = chr(0x81);
  cmd[1] = chr(contrast);
  cmd[2] = chr(0xff);
  spiWriteLcdCom(cmd);
}

public void updateContrast(int cursor) {  //コントラスト調整
  if (cursor == 0) {
    setContrast(contrastLevel + 1);     //set関数が呼ばれたら consrastLebel は更新されている
  } else if (cursor == 1) {
    setContrast(contrastLevel - 1);
  }
}

public int getContrastLevel() {  //c--ではpublic変数をincludeで使用できないため、関数として定義
  return contrastLevel;
}

void setVolume(int level) {
  if (level < 1) level = 1;
  if (level > 10) level = 10;
  volumeLevel = level;

  int vol = 0x6060 - (level - 5) * 0x0808; //0x2020がデフォルト値。上位8bitが左チャネル、下位8bitが右チャンネル
  spiWriteMp3Reg(0x0b, vol);               // SCI_VOL:0x0bが音量制御レジスタ
}

public void updateVolume(int cursor) {
  if (cursor == 0) {
    setVolume(volumeLevel + 1);
  } else if (cursor == 1) {
    setVolume(volumeLevel - 1);
  }
}

public int getVolumeLevel() {
  return volumeLevel;
}

public int getSleepTimeIdx() {
  return sleepTimeIdx;
}

void setSleepTimeIdx(int idx) {
  if (idx < 0) {
    idx = 0;            // 負のインデクスにはさせない．
  }
  if (idx >= 5) {
    idx = 5;            // インデクスをオーバーさせない．
  }
  sleepTimeIdx = idx;   // 更新後のインデクスを代入する．
  showSleepTime(idx);   // lcd に更新後のインデクスを渡す．
}

public void updateSleepTimeIdx(int cursor) {
  if (cursor == 0) {
    setSleepTimeIdx(sleepTimeIdx + 1);
  } else if (cursor == 1) {
    setSleepTimeIdx(sleepTimeIdx - 1);
  }
}

// char 型配列を int に変換する関数．1から3桁の整数に対応．
int charToInt(int idx) {
  int m = strLen(settingsData[idx]) - 1;           //  対象の設定データの桁数から，1の位のインデクスを計算
  int result = 0;
  
  while (true) {
    
    // 1 の位の計算
    result = result + (ord(settingsData[idx][m]) - ord ('0')) * 1;
    if (m-1 < 0) break;                           // 1 の位みならば抜ける
    m = m - 1;

    // 10 の位の計算
    result = result + (ord(settingsData[idx][m]) - ord ('0')) * 10;
    break;
  }
  return result;
}




// 設定ファイルの初期化を行う．なければ作る．あれば設定を読み出してくる．
public void initSettings() {
  int fd;                                           // ファイルディスクリプタ
  if ((fd=open(settingsDir, READ_MODE))<0) {
   mkDir(settingsDir);                              // フォルダがなければつくる
   creat(fnameToPath(fname));                       // フォルダがなければファイルがあるはずがないのでファイルも作る
   contrastLevel = 5;                               // 初期値を与える
   volumeLevel = 5;                                 // 初期値を与える
   sleepTimeIdx = 1;                                // 初期値は 30 秒にするのでインデクスは1

   // 設定を変更せずにリセットするとエラーになるのでここでファイルに書き込み動作を行う
   writeSettingsData();
  } else {
    int fp = open(fnameToPath(fname), READ_MODE);   // 設定ファイルを読む
    if (fp < 0) {
    panic("panic : can't open settings file. The error occurred.");
    }

    int line = 0;                                   // いまの行数を示すインデクス
    // EOF が来るまでファイルを読み込む
    while (read(fp, ch_buf, 1) != 0) {
      ch_buf[1] = '\0';
      if (ch_buf[0] == 0x0a) {                      // もし改行だったら一つの要素の入力は終わり
        settingsData[line][strLen(settingsData[line])] = '\0';
        line = line + 1;
        if (line >= 3) {
          break;                                    // スリープ時間の設定まで呼んだらループを抜ける
        }
      } else {
        strCat(settingsData[line], ch_buf);         // settingsData にデータを入れる
      }
    }
    // データの読み込みが終わったら int 型に変換して変数に書き込む．
    //----------------------------------------------------
    // 0行目：音量　1行目：コントラスト　2行目：スリープまでの時間
    //----------------------------------------------------
    volumeLevel = charToInt(0);
    contrastLevel = charToInt(1);
    sleepTimeIdx = charToInt(2);
    // ここで読み込む
    //-----------------------------------------------------

    close(fp); 
  }
  close(fd); 

  // ファイルあり，なしの場合も spi に値を渡して初期化処理を終了する．sleepTime は spi に渡さず，ShellProc にわたす．
  setVolume(volumeLevel);
  setContrast(contrastLevel);
  setSleepTimeIdx(sleepTimeIdx);
}

// int 型の値を char 型に変換して settingsData にいれる．
void intToChar(int data, int idx) {
  
  int digit;
  if (data / 10 != 0) { // データが 2桁かどうか？
    digit = 1;
  } else { // ここまでくるとデータは 1 桁である．
    digit = 0;
  }
  
  // データリストの初期化
  settingsData[idx][0] = '\0';
  tmp[0] = '\0';

  while(true) {
    dg[0] = chr(0x30 + data % 10);
    dg[1] = '\0';
    // 1 の位を入れ込む
    strCat(tmp, dg);
    if (digit - 1 < 0) {  // 1 桁だったら終端記号を入れてループを抜ける
      break;
    }
    digit = digit - 1;

    // 10 の位の入れ込む
    data = data / 10;
    dg[0] = chr(0x30 + data % 10);
    dg[1] = '\0';
    strCat(tmp, dg);
    break;
  }
  // tmp に逆順で格納されているので，逆にしてもとに戻す
  for (int i = 0; i < strLen(tmp); i = i + 1) {
    dg[0] = tmp[strLen(tmp) - i - 1];
    dg[1] = '\0';
    strCat(settingsData[idx],dg);
  }
}

// 各変数の値をファイルに書き込む．設定画面から抜けたときにファイルに書き込めばよいだろう．
public void writeSettingsData() {

  // まずは今の各種設定値を文字列に変換する
  intToChar(volumeLevel, 0);
  intToChar(contrastLevel, 1);
  intToChar(sleepTimeIdx, 2);

  // ファイルオープン
  int fp = open(path, WRITE_MODE);
   if (fp < 0) {
    panic("panic : can't open setting file in WRITE_MODE.");
  }

  // ファイルへの設定値の書き込み
  for (int i = 0; i < 3; i = i + 1) {
    int idx = 0;
    while (settingsData[i][idx] != '\0') {
      ch_buf[0] = settingsData[i][idx];
      ch_buf[1] = '\0';
      if (write(fp, ch_buf, 1) < 0) {
        panic("Error occurred. File write was not finished.\n");
      }
      idx = idx + 1;
    }
    ch_buf[0] = '\n';                 //  改行の書き込み
    if (write(fp, ch_buf, 1) < 0) {
        panic("Error occurred. File write was not finished.\n");
    }
  }
  ch_buf[0] = '\0';                   // 終端記号の書き込み
  if (write(fp, ch_buf, 1) < 0) {
        panic("Error occurred. File write was not finished.\n");
  }
  close(fp);
}