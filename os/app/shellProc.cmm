/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * shellProc.cmm : MP3 プレーヤのメインプロセス
 *
 * 2020.09.07 : 新規作成
 *
 * $Id$
 *
 */
#include <kernel.hmm>
#include <util.hmm>
#include "lcd.hmm"
#include "mp3Proc.hmm"
#include "spi.hmm"
#include "mp3Files.hmm"
#include "shellProc.hmm"
#include "screenState.hmm"
#include "mm.hmm"
#include "option.hmm"


//-----------------------------------------------------------------------------
// スイッチの読み取り
//-----------------------------------------------------------------------------
// 押しボタンスイッチのビット
#define SW1 0x20
#define SW2 0x10
#define SW3 0x08
#define SW4 0x04
#define SW5 0x02
#define SW6 0x01
#define SWS 0x3f                                    // スイッチのビット全部

#define HOME_STATE 0
#define MUSIC_STATE 1
#define MUSIC_INF 2
#define OPTION_STATE 3
#define VOLUME_STATE 4
#define BRIGHTNESS_STATE 5

#define MAX_LIST 5
#define NAME_LEN 16

int sw0 = 0x00;                                     // 前回の状態(デバウンス前)
int sw1 = 0x00;                                     // 前回の状態(デバウンス後)

int readSw() {
  int sw = ~in(0x18) & SWS;                         // スイッチを読み正論理に変換
  int swd = sw & sw0;                               // デバウンス
  int sw2 = (sw1 ^ swd) & swd;                      // 今回，新たに押されたSW
  sw0 = sw;
  sw1 = swd;
  return sw2;
}

int swToNum(int sw) {
  int num = -1;
  if ((sw & SW6)!=0) {                              // 6 番のスイッチが押された
    num = 6;
  } else if ((sw & SW5)!=0) {                       // 5 番のスイッチが押された
    num = 5;
  } else if ((sw & SW4)!=0) {                       // 4 番のスイッチが押された
    num = 4;
  } else if ((sw & SW3)!=0) {                       // 3 番のスイッチが押された
    num = 3;
  } else if ((sw & SW2)!=0) {                       // 2 番のスイッチが押された
    num = 2;
  } else if ((sw & SW1)!=0) {                       // 1 番のスイッチが押された
    num = 1;
  }
  return num;
}

//画面を表示する関数
void showScreen(int state, int cursorPos) {
    cls();
    locateXY(0, 0);
    putStr(getScreenTitle(state));

    int numItems = getScreenNumItems(state);
    char[][] menuItems = getScreenMenuItems(state);

    for (int i = 0; i < numItems; i=i+1) {
        locateXY(1, i + 1);

        if (i == cursorPos) {
            putStr("-> ");
        } else {
            putStr("   ");
        }

        putStr(menuItems[i]);
    }
    if (state == BRIGHTNESS_STATE) {
      showLevelBar(getContrastLevel());
    }
    else if (state == VOLUME_STATE) {
      showLevelBar(getVolumeLevel());
    }
}

//-----------------------------------------------------------------------------
// MP3 プレーヤのメインプロセス
//-----------------------------------------------------------------------------
// ここからプロセスの実行が始まる
public void shellMain() {
  spiResetLcd();  // sleepを使用するので
  spiResetMp3();  //   プロセスが実行する
  mp3FilesInit();  // ファイル一覧を作る
  initScreens();

  int state = HOME_STATE;
  int prevState = HOME_STATE;  // OPTION用：前の状態を記憶
  int cursorPos = 0;
  int music_idx = 0;
  showScreen(state, cursorPos);

  //メインプロセスのループ
  for (;;) {
    int sw = readSw();
    int num = swToNum(sw);

    if (num == 1) {  // SW1 = 上
      cursorPos = cursorPos - 1;
      if (cursorPos < 0) {
        cursorPos = getScreenNumItems(state) - 1;
      }
      showScreen(state, cursorPos);
    }

    else if (num == 5) {  // SW5 = 下
      cursorPos = cursorPos + 1;
      if (cursorPos >= getScreenNumItems(state)) {
        cursorPos = 0;  // 下端→上端ループ
      }
      showScreen(state, cursorPos);
    }

    else if (num == 3) { // SW3 = 決定
      if (state == HOME_STATE) {
        if (cursorPos + 1 == 1) {
          char[][] musicList = malloc(MAX_LIST * 4);
          int i = 0;
          while (i < MAX_LIST) {
            musicList[i] = malloc(NAME_LEN);
            char[] fname = mp3FilesGetName(i + 1);
            if (fname != null) {
              strCpy(musicList[i], fname);
            } else {
              musicList[i][0] = '\0';
            }
            i = i + 1;
          }
          setScreenMenuItems(MUSIC_STATE, musicList, i);
          prevState = state;
          state = MUSIC_STATE;
          cursorPos = 0;
          showScreen(state, cursorPos);
        }
      }
      else if (state == MUSIC_STATE) {
        char[] selectedTitle = malloc(NAME_LEN);
        char[] fname = mp3FilesGetName(cursorPos + 1);
        music_idx = cursorPos + 1;
        if (fname != null) {
          strCpy(selectedTitle, fname);
          setScreenTitle(MUSIC_INF, selectedTitle);
          prevState = state;
          state = MUSIC_INF;
          cursorPos = 0;
          showScreen(state, cursorPos);
        }
      }
      else if (state == MUSIC_INF) {
        if (cursorPos == 0) {  // PLAY 選択
          char[] path = mp3FilesGetPath(music_idx);  // 曲パス取得
          if (path != null) play(path);
        }
        else if (cursorPos == 1) {  // PAUSE 選択
          stop();
        }
      }
      else if (state == OPTION_STATE) {
        if (cursorPos == 0) {  // VOLUME
          state = VOLUME_STATE;
          cursorPos = 0;
          showScreen(state, cursorPos);
        }
        else if (cursorPos == 1) {  // BRIGHTNESS
          state = BRIGHTNESS_STATE;
          cursorPos = 0;
          showScreen(state, cursorPos);
        }
      }
      else if (state == VOLUME_STATE) {
        if (cursorPos == 0) {
          updateVolume(cursorPos);
          showScreen(state, cursorPos);
        } else if (cursorPos == 1) {
          updateVolume(cursorPos);
          showScreen(state, cursorPos);
        }
      }
      else if (state == BRIGHTNESS_STATE) {
        if (cursorPos == 0) {  // UP
          updateBrightness(cursorPos);
          showScreen(state, cursorPos);
        } else if (cursorPos == 1) {  // DOWN
          updateBrightness(cursorPos);
          showScreen(state, cursorPos);
        }
      }
    }

    else if (num == 2) { // SW2 = 戻る
      if (state == MUSIC_STATE) {
        state = HOME_STATE;
        cursorPos = 0;
        showScreen(state, cursorPos);
      }
      else if (state == MUSIC_INF) {
        state = MUSIC_STATE;
        cursorPos = 0;
        showScreen(state, cursorPos);
      }
      else if (state == VOLUME_STATE) {
        state = OPTION_STATE;
        cursorPos = 0;
        showScreen(state, cursorPos);
      }
      else if (state == BRIGHTNESS_STATE) {
        state = OPTION_STATE;
        cursorPos = 0;
        showScreen(state, cursorPos);
      }
    }

    else if (num == 6) { // SW6 = OPTION 画面の出入り
      if (state == VOLUME_STATE || state == BRIGHTNESS_STATE) {
        state = prevState;
        cursorPos = 0;
        showScreen(state, cursorPos);
      }
      else if (state == OPTION_STATE) {
        state = prevState;      // OPTIONに入る前の状態を記録
        cursorPos = 0;
        showScreen(state, cursorPos);   // OPTION画面へ
      } else {
        prevState = state;
        state = OPTION_STATE;
        cursorPos = 0;
        showScreen(state, cursorPos);
    }
  }

    sleep(10);  // 負荷軽減，10ms待つ
  }
}
