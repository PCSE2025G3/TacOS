/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2019 - 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * lcd.cmm : 液晶ディスプレイのドライバ
 *
 * 2020.08.23 : spitestの一部から組み込み用に転用
 * 2019.08.26 : 液晶の上下をもとに戻す．リセット機能を util.cmm に移動する．
 * 2019.08.18 : 液晶の上下を逆にする
 * 2019.08.09 : 新規作成
 *
 * $Id$
 *
 */

#include "spi.hmm"
#include "font.hmm"
#include "lcd.hmm"

#define MAX_FILE 50
int[] addIdx = array(MAX_FILE); // 追加曲用のidx
int[] delIdx = array(MAX_FILE); // 削除曲用のidx

char[] locateCom = { '\xb0',   // page address
                     '\x10',   // column address Hi = 0x00
                     '\x00',   // column address Lo = 0x00
                     '\xff' }; // EOF

// 液晶上でカーソルを(x,y)に移動
public void locateXY(int x, int y) {
  int x8 = x * 8;
  locateCom[0] = chr(0xb0 | y);             // page address
  locateCom[1] = chr(0x10 | (x8>>4));       // column address Hi
  locateCom[2] = chr(0x00 + (x8 & 0x0f));   // column address Lo
  spiWriteLcdCom(locateCom);
}

// カーソル位置に１文字表示
public void putCh(char c) {
  spiWriteLcdDat(font(c), 8);
}

// カーソル位置に文字列表示
public void putStr(char[] str) {
  for (int i=0; str[i]!='\0'; i=i+1) {
    putCh(str[i]);
  }
}

// カーソル位置に桁数を指定して右詰めで10進数を表示
char[] decBuf = array(6);                   // 16bit int なら最大5桁
public void putDec(int val, int width) {
  int v = val;
  int w = 1;
  if (v==0) {
    decBuf[0]='0';
  } else {
    for (w=0; v!=0; w=w+1) {
      decBuf[w]=chr((v % 10) + ord('0'));
      v = v / 10;
    }
  }
  for (int i=w; i<width; i=i+1) {           // 空白で桁数を合わせる
    putCh(' ');
  }
  for (w=w-1; w>=0; w=w-1) {
    putCh(decBuf[w]);
  }
}

public void cls() {
  for (int i=0; i<8; i=i+1) {
    locateXY(0, i);
    for (int j=0; j<16; j=j+1) {
      putCh(' ');
    }
  }
}

public void showLevelBar(int level) {  //レベルバーを表示する関数
  if (level < 1) level = 1;
  if (level > 10) level = 10;

  locateXY(2, 4);
  putStr("[");

  for (int i = 1; i <= 10; i = i + 1) {
    if (i <= level) {
      putStr("*");
    } else {
      putStr("-");
    }
  }
  putStr("]");
}

public void showRepeatClear() {
  locateXY(11,5);
  putStr("     ");
}

public void showRepeatOne() {
  locateXY(11,5);
  putStr(">1");
}

public void showRepeatAll() {
  locateXY(11,5);
  putStr(">ALL");
}

public void showShuffleClear() {
  locateXY(12,6);
  putStr("   ");
}

public void showShuffleTrue() {
  locateXY(12,6);
  putStr("<->");
}

public void showAddSongs(int m, int n) {  // 第一引数　cursorPos, 第二引数 cursorPos + list_upper + 1
  locateXY(3,m+1);
  putStr("+");
  addIdx[n-1] = 1;
}

public void showAddSongsClear(int m, int n) {
  locateXY(3,m+1);
  putStr(" ");
  addIdx[n-1] = 0;
}

public void addIdxInit() {
  for (int i = 0; i < MAX_FILE; i = i + 1) {
    addIdx[i] = 0;
  }
}

// m 番目の"+"選択状態を返す
public int getAddIdx(int m) { // 引数 cursorPos + list_upper + 1
  return addIdx[m-1];
}

public int[] getAllAddIdx() {
  return addIdx;
}

public void showDelSongs(int m, int n) {
  locateXY(3,m+1);
  putStr("-");
  delIdx[n-1] = 1;
}

public void showDelSongsClear(int m, int n) {
  locateXY(3,m+1);
  putStr(" ");
  delIdx[n-1] = 0;
}

public void delIdxInit() {
  for (int i = 0; i < MAX_FILE; i = i + 1) {
    delIdx[i] = 0;
  }
}

public int getDelIdx(int m) {
  return delIdx[m-1];
}

public int[] getAllDelIdx() {
  return delIdx;
}