/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 * This programming code was procuded by CE2.
 */

#include "playList.hmm"
#include "mp3Files.hmm"
#include <fs.hmm>
#include <util.hmm>
#include "appUtil.hmm"
#include "mm.hmm"

#define LIST_NUM 10 //プレイリストは10個で固定する
#define MAX_LIST 50

char[][] playList = array(50, 13); // 1つのプレイリストに登録できる最大曲数は仮に50曲

char[][] fnames = array(10, 13);                     // 12345678.123

char[] playlistDir = "/playlist";
char[] path = array(18);                            // /playlist/12345678.123
char[] list_path = array(18); 
char[] ch_buf = array(2);                           // ファイルから読み込む1文字＋終端記号
int[] line_num = array(LIST_NUM);                  // プレイリストの登録されている曲数を保持する配列

char[] fnameToPath(char[] fname) {
  strCpy(path, playlistDir);
  strCat(path, "/");
  strCat(path, fname);
  return path;
}

// プレイリストの一覧を表示する．
public void playListInit() {
  int fd;                                           // ファイルディスクリプタ
  if ((fd=open(playlistDir, READ_MODE))<0) {
    panic("panic:can't open playList Dir");
  }
  Dir dir;
  int i = 0;
  while (i< LIST_NUM && (dir=readDir(fd, "TXT"))!=null) {   // 最大10つファイル名を読む
    strCpy(fnames[i], dir.name);
    dbgPutStr("Read PlayList\n");
    i = i + 1;
  }
  close(fd);
  //リスト番号を整理して01→10で並び替える，単純なバブルソート
  int p = 0;
  int q = LIST_NUM - 1;
  while (p < LIST_NUM) {
    q = LIST_NUM - 1; //qの初期化 
    while (q > p) {
        if (strCmp(fnames[q - 1], fnames[q]) > 0) {
            char [] tmp =  malloc(13); //ソートのための一時待避所
            strCpy(tmp, fnames[q - 1]);
            strCpy(fnames[q - 1], fnames[q]);
            strCpy(fnames[q], tmp);
            free(tmp);
        }
        q =  q - 1; // 比較要素の更新
    }
    p = p + 1; //確定要素の更新
  }
}

// n 番目ファイル名を返す（1<=n && n<=LIST_NUM）
public char[] playListGetName(int n) {
  if (1<=n && n<=LIST_NUM) {
    //リストは".txt"を消して表示させる．
    char[] list_fnames = malloc(13);     // 表示用バッファの確保
    strCpy(list_fnames, fnames[n - 1]);  // list_fname に fnames[n - 1] をコピーする
    //拡張子"."が来るまで読み込む
    int idx = 0;
    while(list_fnames[idx] != '.' && list_fnames[idx] != '\0') {
        idx = idx + 1;
    }
    list_fnames[idx] = '\0'; 
    return list_fnames;
  }
  return null;
}

// n 番目パス名を返す（1<=n && n<=LIST_NUM）
public char[] playListGetPath(int n) {
  if (1<=n && n<=LIST_NUM) {
    return fnameToPath(fnames[n-1]);
  }
  return null;
}

// n番目のLISTnに登録されている曲の一覧を取得
public void showPlayListSongs(int n) {

  //プレイリストの初期化処理
  for (int i = 0; i < LIST_NUM; i = i+1) {
    playList[i][0] = '\0';
  }

  strCpy(list_path, playlistDir);
  strCat(list_path, "/");
  strCat(list_path, fnames[n-1]);

  //ファイルをオープンする．
  int fp = open(list_path, READ_MODE);
  if (fp < 0) {
    panic("panic : can't open list file. The error occurred.");
  }
  int m = 0;
  while (read(fp, ch_buf, 1) != 0) {
    ch_buf[1] = '\0';
    if (ch_buf[0] == 0x0a) {
      playList[m][strLen(playList[m])] = '\0';      // 行の最後に終端記号を入れる．
      m = m + 1;
    } else {
        strCat(playList[m], ch_buf);                // １文字ずつ文字列を連結する．
        dbgPutStr("char read\n");
    }
  }
  if (playList[m][0] == '\0') {
    line_num[n-1] = m;
  } else {
    playList[m][strLen(playList[m])] = '\0';       // 最後に終端記号を入れる．
    line_num[n-1] = m + 1;                         // プレイリストに登録されている曲数を代入する．
  }
  if (line_num[n-1] != mp3FilesGetTotalNum() && line_num[n-1] < MAX_LIST){     // プレイリストに登録されている曲数がMP3フォルダ直下にある曲数と等しくなければ "+" アイコンを追加
    strCat(playList[line_num[n-1]],"+");
    line_num[n-1] = line_num[n-1] + 1;
  }
  close(fp);
}                              


//--------------------!!CAUTION!!-----------------------
// 必ず showPlayListSongs(int n) を実行してから取得すること！
//--------------------!!CAUTION!!-----------------------
// LISTn に登録されている曲数を返す（'+'も含む要素数である．）
public int playListSongsGetNum(int n) {
  return line_num[n-1];
}

//--------------------!!CAUTION!!-----------------------
// 必ず showPlayListSongs(int n) を実行してから取得すること！
//--------------------!!CAUTION!!-----------------------
// m 番目のリスト内の n 番目ファイル名を返す（1<=n && n<=line_num[n-1]）
public char[] playListSongsGetName(int m, int n) {
  if (1<=n && n<=line_num[m-1]) {
    return playList[n-1];
  }
  return null;
}

//--------------------!!CAUTION!!-----------------------
// 必ず showPlayListSongs(int n) を実行してから取得すること！
//--------------------!!CAUTION!!-----------------------
// 選択中プレイリスト内の全リストを返す．mp3Files.cmm に渡す配列用の取得関数
public char[][] playListSongsNametoMp3Files() {
  return playList;
}

// 選択中プレイリストに新たに曲を追加する