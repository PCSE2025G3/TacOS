/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 * This programming code was procuded by CE2.
 */

#include "playList.hmm"
#include "mp3Files.hmm"
#include <fs.hmm>
#include <util.hmm>
#include "appUtil.hmm"
#include "mm.hmm"

#define LIST_NUM 10 //プレイリストは10個で固定する

char[][] playList = array(50); // 1つのプレイリストに登録できる最大曲数は仮に50曲

char[][] fnames = array(10, 13);                     // 12345678.123

char[] playlistDir = "/playlist";
char[] path = array(18);                            // /playlist/12345678.123

char[] fnameToPath(char[] fname) {
  strCpy(path, playlistDir);
  strCat(path, "/");
  strCat(path, fname);
  return path;
}

// プレイリストの一覧を表示する．
public void playListInit() {
  int fd;                                           // ファイルディスクリプタ
  if ((fd=open(playlistDir, READ_MODE))<0) {
    panic("panic:can't open playList Dir");
  }
  Dir dir;
  int i = 0;
  while (i< LIST_NUM && (dir=readDir(fd, "TXT"))!=null) {   // 最大10つファイル名を読む
    strCpy(fnames[i], dir.name);
    dbgPutStr("Read PlayList\n");
    i = i + 1;
  }
  close(fd);
  //リスト番号を整理して01→10で並び替える，単純なバブルソート
  int p = 0;
  int q = LIST_NUM - 1;
  while (p < LIST_NUM) {
    q = LIST_NUM - 1; //qの初期化 
    while (q > p) {
        if (strCmp(fnames[q - 1], fnames[q]) > 0) {
            char [] tmp =  malloc(13); //ソートのための一時待避所
            strCpy(tmp, fnames[q - 1]);
            strCpy(fnames[q - 1], fnames[q]);
            strCpy(fnames[q], tmp);
            free(tmp);
        }
        q =  q - 1; // 比較要素の更新
    }
    p = p + 1; //確定要素の更新
  }
}

// n 番目ファイル名を返す（1<=n && n<=LIST_NUM）
public char[] playListGetName(int n) {
  if (1<=n && n<=LIST_NUM) {
    //リストは".txt"を消して表示させる．
    char[] list_fnames = malloc(13);     // 表示用バッファの確保
    strCpy(list_fnames, fnames[n - 1]);  // list_fname に fnames[n - 1] をコピーする
    //拡張子"."が来るまで読み込む
    int idx = 0;
    while(list_fnames[idx] != '.' && list_fnames[idx] != '\0') {
        idx = idx + 1;
    }
    list_fnames[idx] = '\0'; 
    return list_fnames;
  }
  return null;
}

// n 番目パス名を返す（1<=n && n<=LIST_NUM）
public char[] playListGetPath(int n) {
  if (1<=n && n<=LIST_NUM) {
    return fnameToPath(fnames[n-1]);
  }
  return null;
}