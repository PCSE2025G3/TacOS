/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2019 - 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * spi.cmm : spi ドライバ
 *
 * 2020.08.23 : spitestの一部から組み込み用に転用
 * 2019.08.26 : SPI のハードウェア化に対応，リセット機能を追加
 * 2019.08.09 : 新規作成
 *
 * $Id$
 *
 */

#include <util.hmm>
#include <kernel.hmm>
#include "spi.hmm"

// ハードウェアを排他使用するためのセマホ
int spiSem;

// 初期化（プロセス起動前の初期化）
public void spiInit() {
  spiSem = newSem(1);                  // 1プロセスが排他使用するので初期値は1
}

#define DRQ  (in(0x18)&0x80)
#define BUSY (in(0x22)!=0)

#define writeByte(v)       \
{                          \
   while(BUSY){};          \
   out(0x20, v);           \
}

// LCD に連続したコマンドを送る
void writeLcdCom(char[] com) {
  char[] c = com;
  out(0x18, 0xcc);                     // A0='0', xCS='0', clk='0'
  out(0x22, 0x01);                     // SPI クロックを 12.288MHz にする
  for (int i=0; c[i]!='\xff'; i=i+1) {
    writeByte(ord(c[i]));
  }
  while (BUSY) {}                      // SPI の busy が消えるのを待つ
  out(0x18, 0xdc);                     // A0='0', xCS='1', clk='0'
}

// LCD に連続したコマンドを送る（外部から呼び出せる）
public void spiWriteLcdCom(char[] com) {
  semP(spiSem);
  writeLcdCom(com);
  semV(spiSem);
}

// LCD に連続したデータを送る
public void spiWriteLcdDat(char[] dat, int len) {
  semP(spiSem);
  char[] d = dat;
  int    l = len;
  out(0x18, 0xec);                      // A0='1', xCS='0', clk='0'
  out(0x22, 0x01);                      // SPI クロックを 12.288MHz にする
  for (int i=0; i<l; i=i+1) {
    writeByte(ord(d[i]));
  }
  while(BUSY){};                        // SPI の busy が消えるのを待つ
  out(0x18, 0xfc);                      // A0='1', xCS='1', clk='0'
  semV(spiSem);
}

// LCD をリセットする
char[] initCom = { '\x40', '\xa1', '\xc0', '\xa6',
                   '\xa2', '\x2f', '\xf8', '\x00',
                   '\x27', '\x81', '\x10', '\xac',
                   '\x00', '\xaf', '\xff' };          // 0xff=EOF

public void spiResetLcd() {
  semP(spiSem);
  out(0x18, 0x7c);                     // LCD リセット信号ON
  sleep(1);                            // 1ms 待つ
  out(0x18, 0xfc);                     // LCD リセット信号OFF
  sleep(1);                            // 1ms 待つ
  writeLcdCom(initCom);                // LCD 初期化コマンド
  semV(spiSem);
}

// MP3 デコーダのレジスタに書く
void writeMp3Reg(int addr, int arg) {
  out(0x18, 0xf8);                      // xCS='0', clk='0'
  out(0x22, 0x03);                      // SPI クロックを 6.144MHz にする
  while (DRQ==0) { sleep(1); }
  writeByte(0x02);                      // SPI Write コマンド
  writeByte(addr);                      // レジスタアドレス
  writeByte(arg>>8);                    // データの上位8ビット
  writeByte(arg);                       // データの下位8ビット
  while(BUSY){};                        // SPI の busy が消えるのを待つ
  out(0x18, 0xfc);                      // xCS='1', clk='0'
}

// MP3 デコーダのレジスタに書く
public void spiWriteMp3Reg(int addr, int arg) {
  semP(spiSem);
  writeMp3Reg(addr, arg);
  semV(spiSem);
}

// MP3 デコーダのレジスタを読む
public int spiReadMp3Reg(int addr) {
  semP(spiSem);
  out(0x18, 0xf8);                      // xCS='0', clk='0'
  out(0x22, 0x06);                      // SPI クロックを 3.57MHz にする
  while (DRQ==0) { sleep(1); }          //  読出しはクロックを遅くする必要あり
  writeByte(0x03);                      // SPI Read コマンド
  writeByte(addr);                      // レジスタアドレス
  while(BUSY){};                        // SPI の busy が消えるのを待つ
  out(0x20, 0);                         // データの上位8ビット読出しを指示
  while(BUSY){};                        // SPI の busy が消えるのを待つ
  int val = in(0x20);                   // データの上位8ビットを取り出す
  while(BUSY){};                        // SPI の busy が消えるのを待つ
  out(0x20, 0);                         // データの下位8ビット読出しを指示
  while(BUSY){};                        // SPI の busy が消えるのを待つ
  val = (val << 8) | in(0x20);          // データの下位8ビットを取り出す
  out(0x18, 0xfc);                      // xCS='1', clk='0'
  semV(spiSem);
  return val;
}

// MP3 デコーダにデータを送る
public void spiWriteMp3Dat(char[] dbuf, int len) {
  semP(spiSem);
  char[] d = dbuf;                     // C-- コンパイラの都合（速い）
  out(0x18, 0xf4);                     // xDCS='0', clk='0'
  out(0x22, 0x03);                     // SPI クロックを 6.144MHz にする
  for (int i=0; i<len; i=i+1) {
    while (DRQ==0) { sleep(1); }
    writeByte(ord(d[i]));              // SPI にデータを送る
  }
  while(BUSY){};                       // SPI の busy が消えるのを待つ
  out(0x18, 0xfc);                     // xDCS='1', clk='0'
  semV(spiSem);
}

// MP3 デコーダをリセットする
public void spiResetMp3() {
  semP(spiSem);
  out(0x18, 0xbc);                     // MP3 リセット信号OFF
  out(0x18, 0xfc);                     // MP3 リセット信号OFF (80ns以上)
  sleep(15);                           // 15ms 待つ(2ms以上)
  if (DRQ==0) {
    panic("\nTime out for DRQ!\n");
  }
  writeMp3Reg(0x00, 0x0800);           // mode <- NEW mode
  writeMp3Reg(0x03, 0x30d4);           // clock adjust <- 25MHz
  sleep(1);
  writeMp3Reg(0x0b, 0x2020);           // volume set to (-16dB, -16dB)
  sleep(1);
  semV(spiSem);
}

// MP3 デコーダのバッファをクリアする
public void spiFlushMp3() {
  semP(spiSem);
  out(0x18, 0xf4);                     // xDCS='0', clk='0'
  out(0x22, 0x03);                     // SPI クロックを 6.144MHz にする
  for (int i=0; i<2048; i=i+1) {       // 2KiB の 0 を
    while (DRQ==0) { sleep(1); }       //   デコーダに送る
    writeByte(0);
  }
  while(BUSY){};                       // SPI の busy が消えるのを待つ
  out(0x18, 0xfc);                     // xDCS='1', clk='0'
  semV(spiSem);
}
